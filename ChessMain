"""
This is the main driver file. Responsible for user input and displaying the current GameState object.
"""
import pygame as p
from Chess import ChessEngine

WIDTH = HEIGHT = 512  # 400 also use able
DIMENSION = 8  # dimensions of a chess board
SQ_SIZE = HEIGHT // DIMENSION
MAX_FPS = 15  # for animations later on
IMAGES = {}

"""
Initialize a directory of images. This will open exactly once in the main.
"""


def loadImages():
    pieces = ["wp", "bp", "wN", "bN", "wR", "bR", "wB", "bB", "wQ", "bQ", "wK", "bK"]
    for piece in pieces:
        IMAGES[piece] = p.transform.scale(p.image.load("chess pieces/" + piece + ".png"), (SQ_SIZE, SQ_SIZE))
        # Note: Can access an image by saying 'IMAGES['wp']'


"""
The main driver for this code. This will handle upgrading the graphics.
"""


def main():
    p.init()
    screen = p.display.set_mode((WIDTH, HEIGHT))
    clock = p.time.clock()
    screen.fill(p.Color("white"))
    gs = ChessEngine.GameState()
    print(gs.board)
    loadImages()  # Only once before the loop.
    running = True
    while running:
        for e in p.event.get():
            if e.type == p.QUIT:
                running = False
        drawGameState(screen, gs)
        clock.tick(MAX_FPS)
        p.display.flip()


"""
Responsible for all graphics in current GameState.
"""


def drawGameState(screen, gs):
    drawBoard(screen)  # draw squares on the board
    drawPieces(screen, gs.board)


"""
Draw the squares on the board. The top left square is always white.
"""


def drawBoard(screen):
    colors = [p.Color("white"), p.Color("gray")]
    for r in range(DIMENSION):
        for c in range(DIMENSION):
            color = colors[((r + c) % 2)]
            p.draw.rect(screen, color, p.Rect(c * SQ_SIZE, r * SQ_SIZE, SQ_SIZE, SQ_SIZE))


"""
draw pieces on board
"""


def drawPieces(screen, board):
    for r in range(DIMENSION):
        for c in range(DIMENSION):
            piece = board[r][c]
            if piece != "--":  # not empty square
                screen.blit(IMAGES[piece], p.Rect(c * SQ_SIZE, r * SQ_SIZE, SQ_SIZE, SQ_SIZE))


if __name__ == "__name__":
    main()
